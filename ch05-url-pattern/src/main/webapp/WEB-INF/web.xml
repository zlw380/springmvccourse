<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    声明，注册springmvc的核心对象DispatcherServlet中央调度器
        如果只是声明中央调度器对象，那就只有在前端页面发起请求访问该对象的时候
        该对象才会被创建
        但需要在tomcat服务器启动后，就创建DispatcherServlet对象的实例
        为什么要创建DispatcherServlet对象的实例呢？
        因为DispatcherServlet中央调度器在它的创建过程中，会同时创建springmvc容器对象，
        读取springmvc的配置文件，把这个配置文件中的对象都创建好，当用户发起
        请求时就可以直接使用对象了。
        跟在需要获取spring容器对象时配置监听器的方法类似

        创建servlet后，servlet的初始化会执行init()方法，DispatcherServlet在init()中会{
            创建springmvc容器，读取配置文件创建Controller控制器对象
            WebApplicationContext ctx = new ClassPathXmlApplicationContext("springmvc.xml");
            把容器对象放入到servletContext全局作用域中,和监听器对spring容器对象执行的操作一样
            getServletContext().setAttribute(Key,ctx);
            Key参数是 全限定的类名.CONTEXT.(FrameworkServlet.class.getName() + ".CONTEXT.")+中央调度器的名称
            Value参数就是springmvc容器对象的引用ctx
        }

        启动tomcat报错，是因为中央调度器在读取这个文件：/WEB-INF/springmvc-servlet.xml(/WEB-INF/myweb-servlet.xml)
        以创建springmvc容器对象时，其默认读取的配置文件路径和文件名是/WEB-INF/<servlet-name>-servlet.xml
        -->
    <servlet>
<!--        中央调度器对象的名字-->
        <servlet-name>myweb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
<!--        自定义springmvc读取的配置文件的位置-->
        <init-param>
<!--        要设定的参数是配置文件的位置-->
            <param-name>contextConfigLocation</param-name>
<!--        指定要读取的springmvc配置文件的路径和名字-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

<!--        在tomcat启动后，就创建servlet对象
            load-on-startup:表示tomcat启动后创建对象的顺序，它的值是整数，数值越小
            tomcat创建对象的时间越早，通常取大于等于0的整数-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>myweb</servlet-name>
<!--        使用框架的时候，url-pattern可以使用两种值
            1.使用扩展名方式，语法 *.xxxx ， xxxx是自定义的扩展名。
            常用的方式 *.do ， *.action ， *.mvc等等
            意思是前端页面的请求是以.xxxx结尾的，这些请求就都交给这个servlet处理
            如请求地址为http://localhost:8080/myweb/some.do
                      http://localhost:8080/myweb/other.do
            2.使用斜杠"/",斜杠会拦截所有请求
            当你的项目中使用了"/"，它会去替代tomcat中的default
            导致所有的静态资源都给DispatcherServlet处理
            默认情况下DispatcherServlet没有处理静态资源的能力
            没有控制器对象能处理静态资源的访问，所以静态资源都是404
            静态资源包括html、js、图片、css等
            jsp可以访问，html，js，img，css不能访问

            根本上还是取决于是否有servlet处理这个资源的请求,你手撕也好，配置也好，只要有对应的servlet就可以处理

            动态资源some.do是可以访问的，因为我们程序中有MyController控制器对象
            能处理some.do请求
            -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--    注册声明过滤器，解决post请求乱码的问题-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
<!--        设置项目中使用的字符编码-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
<!--        强制请求对象(HttpServletRequest)使用encoding编码的值-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
<!--        强制应答对象(HttpServletResponse)使用encoding编码的值-->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
<!--        /*:表示强制所有的请求先通过过滤器处理-->
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>

<!--
    jsp会被翻译成Servlet，而Servlet是动态文件
    jsp就是一个servlet，jsp文件是动态文件
    jsp由另外的Servlet处理，自己去看下tomcat配置
    jsp里面是可以写java代码的，这就是个变形的servlet
    JSP文件属于动态资源文件，其相关命令需要在服务端编译并执行的 懂？
    tomcat会把jsp文件编辑成servlet接口实现类。

    浏览器访问web时，看似是直接访问的jsp页面，
    其实是，最先到达的地方是服务器，服务器创建好req和resp对象后再给jsp页面使用。
    在jsp中完成设置字符集和取得表单参数后再调用servlet，完成业务处理。
    然后返回到jsp，jsp就会生成相应的html页面。该页面会返回到服务器，
    再由服务器，通过response对象返回给客户端。

    The JSP page compiler and execution servlet, which is the mechanism
    used by Tomcat to support JSP pages.  Traditionally, this servlet
    is mapped to the URL pattern "*.jsp".
    <servlet>
        <servlet-name>jsp</servlet-name>
        <servlet-class>org.apache.jasper.servlet.JspServlet</servlet-class>
        <init-param>
            <param-name>fork</param-name>
            <param-value>false</param-value>
        </init-param>
        <init-param>
            <param-name>xpoweredBy</param-name>
            <param-value>false</param-value>
        </init-param>
        <load-on-startup>3</load-on-startup>
    </servlet>

    The mappings for the JSP servlet
    <servlet-mapping>
        <servlet-name>jsp</servlet-name>
        <url-pattern>*.jsp</url-pattern>
        <url-pattern>*.jspx</url-pattern>
    </servlet-mapping>
    -->