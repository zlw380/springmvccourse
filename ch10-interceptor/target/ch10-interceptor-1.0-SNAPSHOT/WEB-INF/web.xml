<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    声明，注册springmvc的核心对象DispatcherServlet中央调度器
        如果只是声明中央调度器对象，那就只有在前端页面发起请求访问该对象的时候
        该对象才会被创建
        但需要在tomcat服务器启动后，就创建DispatcherServlet对象的实例
        为什么要创建DispatcherServlet对象的实例呢？
        因为DispatcherServlet中央调度器在它的创建过程中，会同时创建springmvc容器对象，
        读取springmvc的配置文件，把这个配置文件中的对象都创建好，当用户发起
        请求时就可以直接使用对象了。
        跟在需要获取spring容器对象时配置监听器的方法类似

        创建servlet后，servlet的初始化会执行init()方法，DispatcherServlet在init()中会{
            创建springmvc容器，读取配置文件创建Controller控制器对象
            WebApplicationContext ctx = new ClassPathXmlApplicationContext("springmvc.xml");
            把容器对象放入到servletContext全局作用域中,和监听器对spring容器对象执行的操作一样
            getServletContext().setAttribute(Key,ctx);
            Key参数是全限定的类名.CONTEXT.(FrameworkServlet.class.getName() + ".CONTEXT.")+中央调度器的名称
            Value参数就是springmvc容器对象的引用ctx
        }

        启动tomcat报错，是因为中央调度器在读取这个文件：/WEB-INF/springmvc-servlet.xml(/WEB-INF/myweb-servlet.xml)
        以创建springmvc容器对象时，其默认读取的配置文件路径和文件名是/WEB-INF/<servlet-name>-servlet.xml
        -->
    <servlet>
<!--        中央调度器对象的名字-->
        <servlet-name>myweb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
<!--        自定义springmvc读取的配置文件的位置-->
        <init-param>
<!--        要设定的参数是配置文件的位置-->
            <param-name>contextConfigLocation</param-name>
<!--        指定要读取的springmvc配置文件的路径和名字-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

<!--        在tomcat启动后，就创建servlet对象
            load-on-startup:表示tomcat启动后创建对象的顺序，它的值是整数，数值越小
            tomcat创建对象的时间越早，通常取大于等于0的整数-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>myweb</servlet-name>
<!--        使用框架的时候，url-pattern可以使用两种值
            1.使用扩展名方式，语法 *.xxxx ， xxxx是自定义的扩展名。
            常用的方式 *.do ， *.action ， *.mvc等等
            意思是前端页面的请求是以.xxxx结尾的，这些请求就都交给这个servlet处理
            如请求地址为http://localhost:8080/myweb/some.do
                      http://localhost:8080/myweb/other.do
            2.使用斜杠"/"
            -->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>

<!--ServletContext 全局作用域 随着服务器的开启创建 随着服务器关闭销毁，web有讲

初始化：  Tomcat启动，创建DispatcherServlet对象，执行DispatcherServlet对象的init()方法
         创建springmvc容器，创建控制器对象，将springmvc容器放入servletContext全局作用域
响应请求：发起请求，执行DispatcherServlet对象的service()方法
         调用doService方法
         调用doDispatch方法，核心方法，处理请求
         调用执行控制器对象中与请求对应的方法，并返回ModelAndView对象mv-->